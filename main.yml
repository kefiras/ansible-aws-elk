---
- name: Bring up EC2 instances, security groups
  hosts: all 
  connection: local
  vars_files:
    - vars/credentials.yml
    - defaults/main.yml
  environment:
    aws_access_key_id: "{{ aws_access_key_id }}"
    aws_secret_access_key: "{{ aws_secret_access_key }}"

# tasks file for elasticsearch
  tasks:
    - name: Create security groups for all applications
      ec2_group:
        name: "{{ item.sg_name }}"
        description: "{{ item.sg_description }}"
        rules:
        - proto: "{{ item.sg_proto }}"
          ports: "{{ item.sg_ports }}"
          cidr_ip: "{{ item.sg_cidr_ip }}"
      loop: "{{ deployment }}"
    
    - name: Boot ec2 instances
      ec2:
        count: "{{ item.count }}"
        key_name: "{{ key_name }}"
        region: "{{ region }}"
        instance_type: m5.large
        image: "{{ ami_id }}"
        wait: yes
        group: "{{ item.sg_name }}"
        vpc_subnet_id: "{{ vpc_subnet_id }}"
        assign_public_ip: yes
        state: present
        instance_tags:
          type: "{{ item.tag }}"
      loop: "{{ deployment }}"
      register: ec2

    - name: Add new instance to a host group
      add_host:
        hostname: "{{ item.public_ip }}"
        type: "{{ item.type }}"
        instance_id: "{{ item.instance_id }}"
        groupname: launched
        ansible_host_key_checking: false
        ansible_user: centos
        ansible_ssh_private_key_file: "/Users/wojtas/.ssh/aws-frankfurt.pem"
      loop: "{{ ec2.results| nested_lists }}" 

    - name: Wait for SSH to come up
      delegate_to: "{{ item.public_ip }}"
      wait_for_connection:
        delay: 30
        timeout: 320
      with_items: "{{ ec2.results | nested_lists }}"
      vars:
        ansible_user: centos
    
- name: Bring up ELB and attach instances to it
  hosts: launched
  gather_facts: False
  vars_files:
    - vars/credentials.yml
    - defaults/main.yml

  tasks:
    - name: Provision ELB
      local_action: 
      module: ec2_elb_lb
        name: Elasticsearch Load Balancer
        state: present
        security_group_names: sg_elasticsearch
        region: "{{ region }}"
        subnets: "{{ vpc_subnet_id }}"
        listeners: "{{ elasticsearch_lb }}"
        instance_ids: "{{ item }}" 
      with_items: "{{ hostvars[inventory_hostname].instance_id }}"
      when: "'elasticsearch' in hostvars[inventory_hostname].type"
      register: elasticsearch_lb

- name: Install elasticsearch, logstash and kibana
  hosts: launched
  gather_facts: True
  become: True
  vars_files:
    - vars/credentials.yml
    - defaults/main.yml

  roles:
    - ansible-role-java
    - { role: ansible-role-elasticsearch, when: "'elasticsearch' in hostvars[inventory_hostname].type" }
    - { role: ansible-role-logstash, when: "'logstash' in hostvars[inventory_hostname].type " }
    - { role: ansible-role-kibana, when: "'kibana' in hostvars[inventory_hostname].type" }


